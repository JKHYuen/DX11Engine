// Cook-Torrence BRDF adapted from https://learnopengl.com/PBR/Lighting
Texture2D albedoMap : register(t0);
Texture2D normalMap : register(t1);
Texture2D metallicMap : register(t2);
Texture2D roughnessMap : register(t3);
Texture2D aoMap : register(t4);

// Shadow map
Texture2D depthMap : register(t5);
TextureCube irradianceMap : register(t6);

SamplerState SamplerWrap : register(s0);
SamplerState SamplerClamp : register(s1);
//SamplerComparisonState SamplerClamp : register(s1);

cbuffer LightBuffer {
    float4 directionalLightColor;
    float3 lightDirection;
    float time;
};

cbuffer MaterialParamBuffer {
    float uvScale;
    float3 padding;
};

struct PixelInputType {
    float4 position : SV_POSITION;
    float2 uv : TEXCOORD0;
    float3 viewDirection : TEXCOORD1;
    float3 normal : NORMAL;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
    
    float4 lightViewPosition : TEXCOORD2;
};

static const float PI = 3.14159265359;

// Normal distribution function
float DistributionGGX(float3 N, float3 H, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

float3 FresnelSchlick(float cosTheta, float3 F0) {
    return F0 + (1.0 - F0) * pow(saturate(1.0 - cosTheta), 5.0);
}

float3 FresnelSchlickRoughness(float cosTheta, float3 F0, float roughness) {
    return F0 + (max(1.0 - roughness, F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

float4 PBRPixelShader(
PixelInputType i) : SV_TARGET {
    i.uv *= uvScale;
    
    ///////////////////////////////////
    /// Calculate PBR Radiance (Lo) ///
    ///////////////////////////////////
    
    float3 albedo = pow(albedoMap.Sample(SamplerWrap, i.uv).rgb, 2.2);
    float ao = aoMap.Sample(SamplerWrap, i.uv).r;
    float3 bumpMap = normalMap.Sample(SamplerWrap, i.uv) * 2.0 - 1.0;
    float3 normal = normalize((bumpMap.x * i.tangent) + (bumpMap.y * i.binormal) + (bumpMap.z * i.normal));
    
    //float3 color = 0.03 * albedo * ao;
    //float3 color = CalcPBRColor(i, albedo, normal, ao);
    
    float metallic = metallicMap.Sample(SamplerWrap, i.uv).r;
    float roughness = roughnessMap.Sample(SamplerWrap, i.uv).r;
    
    // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
    // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
    float3 F0 = 0.04;
    F0 = lerp(F0, albedo, metallic);

    // reflectance equation
    float3 Lo = 0.0;
    //for (int i = 0; i < 4; ++i) {
    // calculate per-light radiance
    float3 L = -lightDirection;
    float3 H = normalize(i.viewDirection + L);
    //float distance = length(lightPositions[i] - WorldPos);
    //float attenuation = 1.0 / (distance * distance);
    //float3 radiance = lightColors[i] * attenuation;
    float3 radiance = directionalLightColor.rgb;

    // Cook-Torrance BRDF
    float NDF = DistributionGGX(normal, H, roughness);
    float G = GeometrySmith(normal, i.viewDirection, L, roughness);
    float3 F = FresnelSchlick(max(dot(i.viewDirection, H), 0.0), F0);
           
    float3 numerator = NDF * G * F;
    float denominator = 4.0 * max(dot(normal, i.viewDirection), 0.0) * max(dot(normal, L), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
    float3 specular = numerator / denominator;
        
    // kS is equal to Fresnel
    float3 kS = F;
    // for energy conservation, the diffuse and specular light can't
    // be above 1.0 (unless the surface emits light); to preserve this
    // relationship the diffuse component (kD) should equal 1.0 - kS.
    float3 kD = 1.0 - kS;
    // multiply kD by the inverse metalness such that only non-metals 
    // have diffuse lighting, or a linear blend if partly metal (pure metals
    // have no diffuse light).
    kD *= 1.0 - metallic;

    // scale light by NdotL
    float NdotL = max(dot(normal, L), 0.0);

    // add to outgoing radiance Lo
    // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
    Lo += (kD * albedo / PI + specular) * radiance * NdotL;
    //}
    
    // IBL ambient lighting
    float3 indirect_kS = FresnelSchlickRoughness(max(dot(normal, i.viewDirection), 0.0), F0, roughness);
    float3 indirect_kD = 1.0 - indirect_kS;
    indirect_kD *= 1.0 - metallic;
    float3 irradiance = irradianceMap.Sample(SamplerWrap, normal).rgb;
    float3 diffuse = irradiance * albedo;
    float3 ambient = indirect_kD * diffuse * ao;
    
    ////////////////////////
    /// Calculate Shadow ///
    ////////////////////////

    // Calculate the projected texture coordinates.
    float2 projectTexCoord = float2(i.lightViewPosition.x, -i.lightViewPosition.y);
    projectTexCoord = projectTexCoord / i.lightViewPosition.w * 0.5 + 0.5;

    // Calculate the depth of the light.
    float lightDepthValue = i.lightViewPosition.z / i.lightViewPosition.w;
        
    // Set the bias value for fixing the floating point precision issues.
    //float bias = 0.001f;
    float bias = max(0.01 * (dot(normal, -lightDirection)), 0.005);
    // Subtract the bias from the lightDepthValue.
    lightDepthValue = lightDepthValue - bias;
        
    // Shadowmap PCF multisampling
    float shadowFactor = 0.0;
    float width, height, numOfLevels;
    depthMap.GetDimensions(0, width, height, numOfLevels);
    float2 texelSize = 1.0 / width;
    for (int x = -2; x <= 2; ++x) {
        for (int y = -2; y <= 2; ++y) {
            float pcfDepth = depthMap.Sample(SamplerClamp, projectTexCoord + float2(x, y) * texelSize).r;
            shadowFactor += lightDepthValue > pcfDepth ? 0.0 : 1.0;
        }
    }
    shadowFactor /= 25.0;
    
    if (lightDepthValue > 1.0)
        shadowFactor = 0.0;

    float3 color = ambient + Lo * shadowFactor;

    return float4(color, 1.0);
}



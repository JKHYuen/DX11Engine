// Cook-Torrence BRDF adapted from: https://learnopengl.com/PBR/Lighting
Texture2D albedoMap    : register(t0);
Texture2D normalMap    : register(t1);
Texture2D metallicMap  : register(t2);
Texture2D roughnessMap : register(t3);
Texture2D aoMap        : register(t4);
Texture2D heightMap    : register(t5);

// Shadow map
Texture2D depthMap : register(t6);

// IBL
TextureCube irradianceMap : register(t7);
TextureCube prefilterMap  : register(t8);
Texture2D brdfLUT         : register(t9);

SamplerState SamplerWrap   : register(s0);
SamplerState SamplerBorder : register(s1);
SamplerState SamplerClamp  : register(s2);
//SamplerComparisonState SamplerBorder : register(s1);

cbuffer LightBuffer {
    float4 directionalLightColor;
    float3 lightDirection;
    float time;
};

cbuffer MaterialParamBuffer {
    // Note: can move this into uv : TEXCOORD0
    float uvScale;
    float parallaxHeightScale;
    float2 padding;
};

struct PixelInputType {
    float4 position : SV_POSITION;
    float2 uv : TEXCOORD0;
    float3 cameraPosition : TEXCOORD1;
    float4 lightViewPosition : TEXCOORD2;
    float4 worldPosition : TEXCOORD3;
    
    // For parallax occlusion
    float3 tangentViewDirection : TEXCOORD4;
    
    float3 normal : NORMAL;
    float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
};

static const float PI = 3.14159265359;
static const float MAX_REFLECTION_LOD = 9.0;
static const float MIN_PARALLAX_LAYERS = 64;
static const float MAX_PARALLAX_LAYERS = 128;

// Normal distribution function
float DistributionGGX(float3 N, float3 H, float roughness) {
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

float3 FresnelSchlick(float cosTheta, float3 F0) {
    return F0 + (1.0 - F0) * pow(saturate(1.0 - cosTheta), 5.0);
}

float3 FresnelSchlickRoughness(float cosTheta, float3 F0, float roughness) {
    return F0 + (max(1.0 - roughness, F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

// Parallax mapping adapted from: https://learnopengl.com/Advanced-Lighting/Parallax-Mapping
float2 ParallaxMapping(float2 texCoords, float3 viewDir) {
    float numLayers = lerp(MAX_PARALLAX_LAYERS, MIN_PARALLAX_LAYERS, abs(dot(float3(0.0, 0.0, 1.0), viewDir)));
    // calculate the size of each layer
    float layerDepth = 1.0 / numLayers;
    // depth of current layer
    float currentLayerDepth = 0.0;
    // the amount to shift the texture coordinates per layer (from vector P)
    float2 P = viewDir.xy / viewDir.z * parallaxHeightScale;
    float2 deltaTexCoords = P / numLayers;
  
    // get initial values
    float2 currentTexCoords = texCoords;
    float currentDepthMapValue = 1.0 - heightMap.Sample(SamplerWrap, currentTexCoords).r;
      
    [unroll]
    for(int i = 0; i < MAX_PARALLAX_LAYERS && currentLayerDepth < currentDepthMapValue; i++) {
        // shift texture coordinates along direction of P
        currentTexCoords -= deltaTexCoords;
        // get depthmap value at current texture coordinates
        currentDepthMapValue = 1.0 - heightMap.Sample(SamplerWrap, currentTexCoords).r;
        // get depth of next layer
        currentLayerDepth += layerDepth;
    }
    
    // get texture coordinates before collision (reverse operations)
    float2 prevTexCoords = currentTexCoords + deltaTexCoords;

    // get depth after and before collision for linear interpolation
    float afterDepth = currentDepthMapValue - currentLayerDepth;
    float beforeDepth = 1.0 - heightMap.Sample(SamplerWrap, prevTexCoords).r - currentLayerDepth + layerDepth;
 
    // interpolation of texture coordinates
    float weight = afterDepth / (afterDepth - beforeDepth);
    float2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);
    
    // currentParallaxLayer = currentLayerDepth + beforeDepth * weight + afterDepth * (1.0 - weight);

    return finalTexCoords;
}

// Parallax map self shadowing adpated from: https://chanhaeng.blogspot.com/2019/01/normalparllax-mapping-with-self.html
float CalcParallaxSoftShadowMultiplier(float3 lightDir, float2 initialTexCoords, float initialHeight) {
    float shadowMultiplier = 0.0;
    
    float dotDir = max(dot(float3(0, 0, 1), lightDir), 0.0);

    // calculate lighting only for surface oriented to the light source
    if(dotDir > 0) {
        // calculate initial parameters
        float numSamplesUnderSurface = 0;
        shadowMultiplier = 0;
        float numLayers = lerp(MAX_PARALLAX_LAYERS, MIN_PARALLAX_LAYERS, dotDir);
        float layerHeight = initialHeight / numLayers;
        float2 texStep = parallaxHeightScale * lightDir.xy / lightDir.z / numLayers;

        // current parameters
        float currentLayerHeight = initialHeight - layerHeight;
        float2 currentTexCoords = initialTexCoords + texStep;
        float depthFromTexture = 1.0 - heightMap.Sample(SamplerWrap, currentTexCoords).r;
        int stepIndex = 1;
        
        // while point is below depth 0.0
        [loop]
        while (currentLayerHeight > 0.0) {
            // if point is under the surface
            if (depthFromTexture < currentLayerHeight) {
                // calculate partial shadowing factor
                numSamplesUnderSurface += 1;
                float newShadowMultiplier = (currentLayerHeight - depthFromTexture) * (1.0 - stepIndex / numLayers);
                shadowMultiplier = max(shadowMultiplier, newShadowMultiplier);
            }

            // offset to the next layer
            stepIndex += 1;
            currentLayerHeight -= layerHeight;
            currentTexCoords += texStep;
            depthFromTexture = 1.0 - heightMap.Sample(SamplerWrap, currentTexCoords).r;
        }
        
        // Shadowing factor should be 1 if there were no points under the surface
        if(numSamplesUnderSurface < 1) {
            shadowMultiplier = 1;
        }
        else {
            shadowMultiplier = 1.0 - shadowMultiplier;
        }
    }

    return shadowMultiplier;
}

float4 PBRPixelShader(PixelInputType i) : SV_TARGET {
    i.uv *= uvScale;
    
    //////////////////////////
    /// Parallax Occlusion ///
    //////////////////////////
    if(parallaxHeightScale != 0) {
        // offset texture coordinates with Parallax Mapping
        //float3 tangentViewDir = normalize(i.tangentCameraPosition - i.tangentFragPosition);
        //i.uv = ParallaxMapping(i.uv, tangentViewDir);
        i.uv = ParallaxMapping(i.uv, normalize(i.tangentViewDirection));
    }

    ///////////////////////////////////
    /// Calculate PBR Radiance (Lo) ///
    ///////////////////////////////////
    // Use linear space for albedo
    float3 albedo = pow(albedoMap.Sample(SamplerWrap, i.uv).rgb, 2.2);
    float ao = aoMap.Sample(SamplerWrap, i.uv).r;
    float3 bumpMap = normalMap.Sample(SamplerWrap, i.uv).xyz * 2.0 - 1.0;
    float3 normal = normalize((bumpMap.x * i.tangent) + (bumpMap.y * i.binormal) + (bumpMap.z * i.normal));
    
    float metallic = metallicMap.Sample(SamplerWrap, i.uv).r;
    float roughness = roughnessMap.Sample(SamplerWrap, i.uv).r;
    
    float3 viewDirection = normalize(i.cameraPosition - i.worldPosition.xyz);
    
    // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
    // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
    float3 F0 = 0.04;
    F0 = lerp(F0, albedo, metallic);

    // reflectance equation
    float3 Lo = 0.0;
    //for (int i = 0; i < 4; ++i) {
    // calculate per-light radiance
    float3 L = -lightDirection;
    float3 H = normalize(viewDirection + L);
    //float distance = length(lightPositions[i] - WorldPos);
    //float attenuation = 1.0 / (distance * distance);
    //float3 radiance = lightColors[i] * attenuation;
    float3 radiance = directionalLightColor.rgb;

    // Cook-Torrance BRDF
    float NDF = DistributionGGX(normal, H, roughness);
    float G = GeometrySmith(normal, viewDirection, L, roughness);
    float3 F = FresnelSchlick(max(dot(viewDirection, H), 0.0), F0);
           
    float3 numerator = NDF * G * F;
    float denominator = 4.0 * max(dot(normal, viewDirection), 0.0) * max(dot(normal, L), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
    float3 specular = numerator / denominator;
        
    // kS is equal to Fresnel
    float3 kS = F;
    // for energy conservation, the diffuse and specular light can't
    // be above 1.0 (unless the surface emits light); to preserve this
    // relationship the diffuse component (kD) should equal 1.0 - kS.
    float3 kD = 1.0 - kS;
    // multiply kD by the inverse metalness such that only non-metals 
    // have diffuse lighting, or a linear blend if partly metal (pure metals
    // have no diffuse light).
    kD *= 1.0 - metallic;

    // scale light by NdotL
    float NdotL = max(dot(normal, L), 0.0);

    // add to outgoing radiance Lo
    // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
    Lo += (kD * albedo / PI + specular) * radiance * NdotL;
    //}
    
    /////////////////////////////
    ///  IBL Ambient Lighting ///
    /////////////////////////////
    float3 R = reflect(-viewDirection, normal);
    
    float3 indirect_kS = FresnelSchlickRoughness(max(dot(normal, viewDirection), 0.0), F0, roughness);
    float3 indirect_kD = 1.0 - indirect_kS;
    indirect_kD *= 1.0 - metallic;
    
    float3 irradiance = irradianceMap.Sample(SamplerWrap, normal).rgb;
    float3 diffuse = irradiance * albedo;
  
    float3 prefilteredColor = prefilterMap.SampleLevel(SamplerWrap, R, roughness * MAX_REFLECTION_LOD).rgb;
    float2 envBRDF = brdfLUT.Sample(SamplerClamp, float2(max(dot(normal, viewDirection), 0.0), roughness)).rg;
    float3 indirectSpecular = prefilteredColor * (F * envBRDF.x + envBRDF.y);
  
    float3 ambient = (indirect_kD * diffuse + indirectSpecular) * ao;
    
    ////////////////////////
    /// Calculate Shadow ///
    ////////////////////////
    // Calculate the projected texture coordinates.
    float2 projectTexCoord = float2(i.lightViewPosition.x, -i.lightViewPosition.y);
    projectTexCoord = projectTexCoord / i.lightViewPosition.w * 0.5 + 0.5;

    // Calculate the depth of the light.
    float lightDepthValue = i.lightViewPosition.z / i.lightViewPosition.w;
        
    // Set the bias value for fixing the floating point precision issues.
    //float bias = 0.001f;
    float bias = max(0.01 * (dot(normal, -lightDirection)), 0.005);
    // Subtract the bias from the lightDepthValue.
    lightDepthValue = lightDepthValue - bias;
        
    // Shadowmap PCF multisampling
    float shadowFactor = 0.0;
    float width, height, numOfLevels;
    depthMap.GetDimensions(0, width, height, numOfLevels);
    float2 texelSize = 1.0 / width;
    for (int x = -2; x <= 2; ++x) {
        for (int y = -2; y <= 2; ++y) {
            float pcfDepth = depthMap.Sample(SamplerBorder, projectTexCoord + float2(x, y) * texelSize).r;
            shadowFactor += lightDepthValue > pcfDepth ? 0.0 : 1.0;
        }
    }
    shadowFactor /= 25.0;
    
    if(lightDepthValue > 1.0)
        shadowFactor = 1.0;
    
    float3 color = ambient + Lo * shadowFactor;
    
    // Parallax self shadowing, not very efficient, not applied very correctly. But it looks okay.
    if(parallaxHeightScale != 0) {
        float selfShadowFactor;
        float3x3 TBN = transpose(float3x3(i.tangent, i.binormal, i.normal));
        selfShadowFactor = pow(CalcParallaxSoftShadowMultiplier(mul(-lightDirection, TBN), i.uv, 1.0 - heightMap.Sample(SamplerWrap, i.uv).r), 10.0);
        color *= selfShadowFactor;
    }
    
    return float4(color, 1.0);
}


